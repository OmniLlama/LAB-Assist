# Lines that start with a valid parameter followed by a colon will be interpreted by the script. All other lines will be ignored.
#
# This means that it isn't mandatory to comment out a line like in this file with the # character; this is only done for better readabily.
#
# The value of the parameter has to be on the same line as the parameter.
#
# A space between the parameter and the colon is not allowed, a space between the colon and the value is allowed but not mandatory.
#
# Spaces in values are allowed.



# Path to the sfz file that you want to convert to a heartbeat instrument

#sfz_file: /home/abudaan/Downloads/csfptpu-v2-downloads/Chapter 13 [SFZ format] Waves and SFZ Definition Files/pluck/Multi Pluck.sfz
#sfz_file: /media/abudaan/Samples/groovy_instruments/Completed Groovy Sampled Instruments/B00-Trumpet/B00-Trumpet.sfz
sfz_file: /media/abudaan/Samples/heartbeat/City Piano-SFZ/City Piano.sfz


# This name is used to store the instrument in heartbeat's local storage.
# If omitted, the name of the sfz file will be used.

instrument_name: Trumpet


# The folder in heartbeat's storage object where the instrument will be stored.
# If omitted, the instrument will be stored in the root folder, i.e. sequencer.storage.instruments

instrument_folder: groovy


# The file that the converted instrument will be written to
# If omitted, the instrument will be written to a .json file with the same name as the sfz file

# instrument_file: /home/abudaan/workspace/heartbeat/tools/heartbeat_tmp/piano_stereo.json


#
#

# instrument_assetpack: name_of_assetpack_file.json



#### SAMPLES #####

# If omitted, the sample pack will be named after the instrument

samplepack_name: new_samples


# The folder in the samples storage object

samplepack_folder: groovy_samples


# The file that the samples (converted to base64) will be written to
# If omitted, the instrument will be named after the sfz file, for instance if the name of the sfz file is PianoStereo.sfz, the
# samples will be saved to PianoStereo_samples.json

# samplepack_file: /home/abudaan/workspace/heartbeat/tools/heartbeat_tmp/piano_stereo_samples.json


#
#

# samplepack_assetpack: name_of_assetpack_file.json


# The chosen envelope will be used in all samples of the instrument. Options: 'equal power' or 'linear'

release_envelope: equal power


# Choose between 'wav', ogg' and 'mp3', if omitted 'ogg' will be used, 'wav' means no compression

compression_type: ogg


# For ogg:
#   -1 (highest compression/lowest quality) to 10 (lowest compression, highest quality)
#   fractional numbers (e.g. 4.3) are allowed. quality level 3 is about 112 kbps
# For mp3:
#   provide bitrate, e.g. 128, 192, 256 etc. see: http://sox.sourceforge.net/soxformat.html

compression_level: -1


# Trims the part of the wav file after the end of the loop (only possible if the wav file has loops)

trim: true


# Set to 'true' if you want to add a sustain loop based on the loop settings in the wav file, else set to 'false' or omit the parameter

sustain_loop: true


# Key scaled panning: lower notes will be panned right, higher notes will be panned left. You have to specify the range, for instance:
#   -1, 1 -> range from full left to full right
#   -0.5, 0.8 -> range from half left to 80% right
# Set to false or omit parameter if you don't want stereo spread

key_scaling_panning: -0.9, 0.9


# Key scaled release (millis)

key_scaling_release: 350, 1200


# Path to sox executable, only necessary if you don't have sox added to your PATH environment parameter

sox_path: sox


# Cleanup temporary files after conversion has finished

cleanup: false
